
LCD_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000844  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000974  08000974  00010974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000984  08000984  0001098c  2**0
                  CONTENTS
  4 .ARM          00000000  08000984  08000984  0001098c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000984  0800098c  0001098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000984  08000984  00010984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000988  08000988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800098c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800098c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001098c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006e0  00000000  00000000  000109b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000337  00000000  00000000  00011095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  000113d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  00011500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e74  00000000  00000000  000115d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000723  00000000  00000000  0001244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003a0c  00000000  00000000  00012b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001657b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000308  00000000  00000000  000165cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800095c 	.word	0x0800095c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800095c 	.word	0x0800095c

08000170 <M_GPIO_void_SetPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_GPIO_void_SetPinDir(u8 PortID , u8 PinID , u8 Dir)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16 && Dir < 16)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b02      	cmp	r3, #2
 8000186:	f200 80b6 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 800018a:	79bb      	ldrb	r3, [r7, #6]
 800018c:	2b0f      	cmp	r3, #15
 800018e:	f200 80b2 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
 8000192:	797b      	ldrb	r3, [r7, #5]
 8000194:	2b0f      	cmp	r3, #15
 8000196:	f200 80ae 	bhi.w	80002f6 <M_GPIO_void_SetPinDir+0x186>
{
	if(PinID < 8) /*PIN0 : PIN7 --> CRL*/
 800019a:	79bb      	ldrb	r3, [r7, #6]
 800019c:	2b07      	cmp	r3, #7
 800019e:	d852      	bhi.n	8000246 <M_GPIO_void_SetPinDir+0xd6>
	{
		switch(PortID)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	d037      	beq.n	8000216 <M_GPIO_void_SetPinDir+0xa6>
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f300 80a6 	bgt.w	80002f8 <M_GPIO_void_SetPinDir+0x188>
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d002      	beq.n	80001b6 <M_GPIO_void_SetPinDir+0x46>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d018      	beq.n	80001e6 <M_GPIO_void_SetPinDir+0x76>
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
			break;
		}
	}
	}
}
 80001b4:	e0a0      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001b6:	4b53      	ldr	r3, [pc, #332]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	79ba      	ldrb	r2, [r7, #6]
 80001bc:	0092      	lsls	r2, r2, #2
 80001be:	210f      	movs	r1, #15
 80001c0:	fa01 f202 	lsl.w	r2, r1, r2
 80001c4:	43d2      	mvns	r2, r2
 80001c6:	4611      	mov	r1, r2
 80001c8:	4a4e      	ldr	r2, [pc, #312]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001ca:	400b      	ands	r3, r1
 80001cc:	6013      	str	r3, [r2, #0]
			GPIOA_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001ce:	4b4d      	ldr	r3, [pc, #308]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	7979      	ldrb	r1, [r7, #5]
 80001d4:	79ba      	ldrb	r2, [r7, #6]
 80001d6:	0092      	lsls	r2, r2, #2
 80001d8:	fa01 f202 	lsl.w	r2, r1, r2
 80001dc:	4611      	mov	r1, r2
 80001de:	4a49      	ldr	r2, [pc, #292]	; (8000304 <M_GPIO_void_SetPinDir+0x194>)
 80001e0:	430b      	orrs	r3, r1
 80001e2:	6013      	str	r3, [r2, #0]
			break;
 80001e4:	e088      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80001e6:	4b48      	ldr	r3, [pc, #288]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	210f      	movs	r1, #15
 80001f0:	fa01 f202 	lsl.w	r2, r1, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4611      	mov	r1, r2
 80001f8:	4a43      	ldr	r2, [pc, #268]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 80001fa:	400b      	ands	r3, r1
 80001fc:	6013      	str	r3, [r2, #0]
			GPIOB_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80001fe:	4b42      	ldr	r3, [pc, #264]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	7979      	ldrb	r1, [r7, #5]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	fa01 f202 	lsl.w	r2, r1, r2
 800020c:	4611      	mov	r1, r2
 800020e:	4a3e      	ldr	r2, [pc, #248]	; (8000308 <M_GPIO_void_SetPinDir+0x198>)
 8000210:	430b      	orrs	r3, r1
 8000212:	6013      	str	r3, [r2, #0]
			break;
 8000214:	e070      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRL &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000216:	4b3d      	ldr	r3, [pc, #244]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	79ba      	ldrb	r2, [r7, #6]
 800021c:	0092      	lsls	r2, r2, #2
 800021e:	210f      	movs	r1, #15
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a38      	ldr	r2, [pc, #224]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 800022a:	400b      	ands	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
			GPIOC_CRL |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800022e:	4b37      	ldr	r3, [pc, #220]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	7979      	ldrb	r1, [r7, #5]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	4611      	mov	r1, r2
 800023e:	4a33      	ldr	r2, [pc, #204]	; (800030c <M_GPIO_void_SetPinDir+0x19c>)
 8000240:	430b      	orrs	r3, r1
 8000242:	6013      	str	r3, [r2, #0]
			break;
 8000244:	e058      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	else if(PinID < 16) /*PIN0 : PIN7 --> CRL*/
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <M_GPIO_void_SetPinDir+0x186>
		PinID -=8;
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	3b08      	subs	r3, #8
 8000250:	71bb      	strb	r3, [r7, #6]
		switch(PortID)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d036      	beq.n	80002c6 <M_GPIO_void_SetPinDir+0x156>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc4d      	bgt.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <M_GPIO_void_SetPinDir+0xf6>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d018      	beq.n	8000296 <M_GPIO_void_SetPinDir+0x126>
}
 8000264:	e048      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOA_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000266:	4b2a      	ldr	r3, [pc, #168]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	210f      	movs	r1, #15
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	43d2      	mvns	r2, r2
 8000276:	4611      	mov	r1, r2
 8000278:	4a25      	ldr	r2, [pc, #148]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 800027a:	400b      	ands	r3, r1
 800027c:	6013      	str	r3, [r2, #0]
			GPIOA_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	7979      	ldrb	r1, [r7, #5]
 8000284:	79ba      	ldrb	r2, [r7, #6]
 8000286:	0092      	lsls	r2, r2, #2
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <M_GPIO_void_SetPinDir+0x1a0>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
			break;
 8000294:	e030      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOB_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0092      	lsls	r2, r2, #2
 800029e:	210f      	movs	r1, #15
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
			GPIOB_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	7979      	ldrb	r1, [r7, #5]
 80002b4:	79ba      	ldrb	r2, [r7, #6]
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <M_GPIO_void_SetPinDir+0x1a4>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
			break;
 80002c4:	e018      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
			GPIOC_CRH &= ~(0b1111<<(PinID * 4)); //Clear the 4 Bits
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79ba      	ldrb	r2, [r7, #6]
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
			GPIOC_CRH |=  ((Dir)<<(PinID * 4)); //Assign The 4 Bits
 80002de:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	7979      	ldrb	r1, [r7, #5]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	4611      	mov	r1, r2
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <M_GPIO_void_SetPinDir+0x1a8>)
 80002f0:	430b      	orrs	r3, r1
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	e000      	b.n	80002f8 <M_GPIO_void_SetPinDir+0x188>
	}
 80002f6:	bf00      	nop
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40011000 	.word	0x40011000
 8000310:	40010804 	.word	0x40010804
 8000314:	40010c04 	.word	0x40010c04
 8000318:	40011004 	.word	0x40011004

0800031c <M_GPIO_void_SetPinValue>:
void M_GPIO_void_SetPinValue(u8 PortID , u8 PinID , u8 Value)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
 8000326:	460b      	mov	r3, r1
 8000328:	71bb      	strb	r3, [r7, #6]
 800032a:	4613      	mov	r3, r2
 800032c:	717b      	strb	r3, [r7, #5]
	//Range Check
if(PortID < 3 && PinID < 16)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b02      	cmp	r3, #2
 8000332:	d861      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	2b0f      	cmp	r3, #15
 8000338:	d85e      	bhi.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
{
	if(Value == LOW)
 800033a:	797b      	ldrb	r3, [r7, #5]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d12d      	bne.n	800039c <M_GPIO_void_SetPinValue+0x80>
	{
		switch(PortID)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d01e      	beq.n	8000384 <M_GPIO_void_SetPinValue+0x68>
 8000346:	2b02      	cmp	r3, #2
 8000348:	dc57      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 800034a:	2b00      	cmp	r3, #0
 800034c:	d002      	beq.n	8000354 <M_GPIO_void_SetPinValue+0x38>
 800034e:	2b01      	cmp	r3, #1
 8000350:	d00c      	beq.n	800036c <M_GPIO_void_SetPinValue+0x50>
			SET_BIT(GPIOC_ODR , PinID);
			break;
		}
	}
}
}
 8000352:	e052      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOA_ODR , PinID);
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	79ba      	ldrb	r2, [r7, #6]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f202 	lsl.w	r2, r1, r2
 8000360:	43d2      	mvns	r2, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a27      	ldr	r2, [pc, #156]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 8000366:	400b      	ands	r3, r1
 8000368:	6013      	str	r3, [r2, #0]
			break;
 800036a:	e046      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOB_ODR , PinID);
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	79ba      	ldrb	r2, [r7, #6]
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	43d2      	mvns	r2, r2
 800037a:	4611      	mov	r1, r2
 800037c:	4a22      	ldr	r2, [pc, #136]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 800037e:	400b      	ands	r3, r1
 8000380:	6013      	str	r3, [r2, #0]
			break;
 8000382:	e03a      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			CLR_BIT(GPIOC_ODR , PinID);
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	43d2      	mvns	r2, r2
 8000392:	4611      	mov	r1, r2
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 8000396:	400b      	ands	r3, r1
 8000398:	6013      	str	r3, [r2, #0]
			break;
 800039a:	e02e      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	else if(Value == HIGH)
 800039c:	797b      	ldrb	r3, [r7, #5]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d12a      	bne.n	80003f8 <M_GPIO_void_SetPinValue+0xdc>
		switch(PortID)
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d01c      	beq.n	80003e2 <M_GPIO_void_SetPinValue+0xc6>
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	dc26      	bgt.n	80003fa <M_GPIO_void_SetPinValue+0xde>
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <M_GPIO_void_SetPinValue+0x9a>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d00b      	beq.n	80003cc <M_GPIO_void_SetPinValue+0xb0>
}
 80003b4:	e021      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOA_ODR , PinID);
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	2101      	movs	r1, #1
 80003be:	fa01 f202 	lsl.w	r2, r1, r2
 80003c2:	4611      	mov	r1, r2
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <M_GPIO_void_SetPinValue+0xe8>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	6013      	str	r3, [r2, #0]
			break;
 80003ca:	e016      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOB_ODR , PinID);
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	79ba      	ldrb	r2, [r7, #6]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f202 	lsl.w	r2, r1, r2
 80003d8:	4611      	mov	r1, r2
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <M_GPIO_void_SetPinValue+0xec>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6013      	str	r3, [r2, #0]
			break;
 80003e0:	e00b      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
			SET_BIT(GPIOC_ODR , PinID);
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	2101      	movs	r1, #1
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	4611      	mov	r1, r2
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <M_GPIO_void_SetPinValue+0xf0>)
 80003f2:	430b      	orrs	r3, r1
 80003f4:	6013      	str	r3, [r2, #0]
			break;
 80003f6:	e000      	b.n	80003fa <M_GPIO_void_SetPinValue+0xde>
	}
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	4001080c 	.word	0x4001080c
 8000408:	40010c0c 	.word	0x40010c0c
 800040c:	4001100c 	.word	0x4001100c

08000410 <_delay_ms>:
 */
#include "STD_TYPES.h"
#include "Delay.h"

void	_delay_ms(u32 _ms)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e003      	b.n	8000426 <_delay_ms+0x16>
	{
		asm("NOP");
 800041e:	bf00      	nop
	for(u32 i = 0; i < (_ms * 500) ; i++)
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3301      	adds	r3, #1
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	429a      	cmp	r2, r3
 8000434:	d3f3      	bcc.n	800041e <_delay_ms+0xe>
	}
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0

	// set direction Rs, EN
	M_GPIO_void_SetPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT_2MHZ_PP);
 8000446:	2202      	movs	r2, #2
 8000448:	2101      	movs	r1, #1
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff fe90 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT_2MHZ_PP);
 8000450:	2202      	movs	r2, #2
 8000452:	2102      	movs	r1, #2
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff fe8b 	bl	8000170 <M_GPIO_void_SetPinDir>
	//set direction D4 .. D7
	M_GPIO_void_SetPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT_2MHZ_PP);
 800045a:	2202      	movs	r2, #2
 800045c:	2106      	movs	r1, #6
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fe86 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT_2MHZ_PP);
 8000464:	2202      	movs	r2, #2
 8000466:	2105      	movs	r1, #5
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe81 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT_2MHZ_PP);
 800046e:	2202      	movs	r2, #2
 8000470:	2104      	movs	r1, #4
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff fe7c 	bl	8000170 <M_GPIO_void_SetPinDir>
	M_GPIO_void_SetPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT_2MHZ_PP);
 8000478:	2202      	movs	r2, #2
 800047a:	2103      	movs	r1, #3
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe77 	bl	8000170 <M_GPIO_void_SetPinDir>
	// send Init Sequence
#if(LCD_MODE  == LCD_8BIT_MODE_)
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
 8000482:	2023      	movs	r0, #35	; 0x23
 8000484:	f7ff ffc4 	bl	8000410 <_delay_ms>
	// Rs = command = 0
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	2000      	movs	r0, #0
 800048e:	f7ff ff45 	bl	800031c <M_GPIO_void_SetPinValue>
	// EN = 0 disabled
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 8000492:	2200      	movs	r2, #0
 8000494:	2102      	movs	r1, #2
 8000496:	2000      	movs	r0, #0
 8000498:	f7ff ff40 	bl	800031c <M_GPIO_void_SetPinValue>
	// prepare data
	M_GPIO_void_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
 800049c:	2200      	movs	r2, #0
 800049e:	2106      	movs	r1, #6
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ff3b 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2105      	movs	r1, #5
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff ff36 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2104      	movs	r1, #4
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff31 	bl	800031c <M_GPIO_void_SetPinValue>
	M_GPIO_void_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2103      	movs	r1, #3
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ff2c 	bl	800031c <M_GPIO_void_SetPinValue>
	//EN = 1
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2102      	movs	r1, #2
 80004c8:	2000      	movs	r0, #0
 80004ca:	f7ff ff27 	bl	800031c <M_GPIO_void_SetPinValue>
	// delay 1 msec (to allow latching)
	_delay_ms(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f7ff ff9e 	bl	8000410 <_delay_ms>
	// EN = 0
	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2102      	movs	r1, #2
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ff1f 	bl	800031c <M_GPIO_void_SetPinValue>
	// delay to allow processing
	_delay_ms(5);
 80004de:	2005      	movs	r0, #5
 80004e0:	f7ff ff96 	bl	8000410 <_delay_ms>
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
 80004e4:	2028      	movs	r0, #40	; 0x28
 80004e6:	f000 f81d 	bl	8000524 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
 80004ea:	200e      	movs	r0, #14
 80004ec:	f000 f81a 	bl	8000524 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 f817 	bl	8000524 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
 80004f6:	2006      	movs	r0, #6
 80004f8:	f000 f814 	bl	8000524 <H_LCD_void_sendCommand>

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  // step 1 : select RS to be in data mode (RS = 1)
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
 800050a:	2201      	movs	r2, #1
 800050c:	2101      	movs	r1, #1
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff ff04 	bl	800031c <M_GPIO_void_SetPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f8c4 	bl	80006a4 <H_LCD_void_writeNlatch>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	// step 1 : select RS to be in command mode (RS = 0)
	M_GPIO_void_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff fef2 	bl	800031c <M_GPIO_void_SetPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f8b2 	bl	80006a4 <H_LCD_void_writeNlatch>

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
   while(*pstr)
 8000550:	e009      	b.n	8000566 <H_LCD_void_sendString+0x1e>
   {
	   H_LCD_void_sendData(*pstr);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f993 3000 	ldrsb.w	r3, [r3]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffd0 	bl	8000500 <H_LCD_void_sendData>
	   pstr++;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
   while(*pstr)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f993 3000 	ldrsb.w	r3, [r3]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f0      	bne.n	8000552 <H_LCD_void_sendString+0xa>
   }
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff ffd0 	bl	8000524 <H_LCD_void_sendCommand>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
   u8 Loc_Arr[10]= {0};
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	809a      	strh	r2, [r3, #4]
   s8 i = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	75fb      	strb	r3, [r7, #23]
   if(copy_s32Num == 0)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d103      	bne.n	80005b0 <H_LCD_void_sendIntNum+0x28>
   {
	   H_LCD_void_sendData('0');
 80005a8:	2030      	movs	r0, #48	; 0x30
 80005aa:	f7ff ffa9 	bl	8000500 <H_LCD_void_sendData>
 80005ae:	e049      	b.n	8000644 <H_LCD_void_sendIntNum+0xbc>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da27      	bge.n	8000606 <H_LCD_void_sendIntNum+0x7e>
   {
	   H_LCD_void_sendData('-');
 80005b6:	202d      	movs	r0, #45	; 0x2d
 80005b8:	f7ff ffa2 	bl	8000500 <H_LCD_void_sendData>
	   copy_s32Num *= -1;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	425b      	negs	r3, r3
 80005c0:	607b      	str	r3, [r7, #4]
   }
   while(copy_s32Num != 0)
 80005c2:	e020      	b.n	8000606 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <H_LCD_void_sendIntNum+0xc4>)
 80005c8:	fb83 1302 	smull	r1, r3, r3, r2
 80005cc:	1099      	asrs	r1, r3, #2
 80005ce:	17d3      	asrs	r3, r2, #31
 80005d0:	1ac9      	subs	r1, r1, r3
 80005d2:	460b      	mov	r3, r1
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	440b      	add	r3, r1
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	1ad1      	subs	r1, r2, r3
 80005dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005e0:	b2ca      	uxtb	r2, r1
 80005e2:	3318      	adds	r3, #24
 80005e4:	443b      	add	r3, r7
 80005e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	   copy_s32Num = copy_s32Num /10 ;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <H_LCD_void_sendIntNum+0xc4>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	1092      	asrs	r2, r2, #2
 80005f4:	17db      	asrs	r3, r3, #31
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	607b      	str	r3, [r7, #4]
	   i++;
 80005fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	75fb      	strb	r3, [r7, #23]
   while(copy_s32Num != 0)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1db      	bne.n	80005c4 <H_LCD_void_sendIntNum+0x3c>
   }
   i--;
 800060c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	3b01      	subs	r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	75fb      	strb	r3, [r7, #23]
   while(i>=0)
 8000618:	e010      	b.n	800063c <H_LCD_void_sendIntNum+0xb4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
 800061a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800061e:	3318      	adds	r3, #24
 8000620:	443b      	add	r3, r7
 8000622:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000626:	3330      	adds	r3, #48	; 0x30
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff68 	bl	8000500 <H_LCD_void_sendData>
	   i--;
 8000630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3b01      	subs	r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	75fb      	strb	r3, [r7, #23]
   while(i>=0)
 800063c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000640:	2b00      	cmp	r3, #0
 8000642:	daea      	bge.n	800061a <H_LCD_void_sendIntNum+0x92>
   }
}
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	66666667 	.word	0x66666667

08000650 <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <H_LCD_void_gotXY+0x1c>
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d116      	bne.n	800069a <H_LCD_void_gotXY+0x4a>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d813      	bhi.n	800069a <H_LCD_void_gotXY+0x4a>
	  {
          switch(copy_u8Row)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <H_LCD_void_gotXY+0x2e>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d007      	beq.n	800068c <H_LCD_void_gotXY+0x3c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
        	  break;
          }
	  }
  }
}
 800067c:	e00e      	b.n	800069c <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	3b80      	subs	r3, #128	; 0x80
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff4d 	bl	8000524 <H_LCD_void_sendCommand>
        	  break;
 800068a:	e007      	b.n	800069c <H_LCD_void_gotXY+0x4c>
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	3b40      	subs	r3, #64	; 0x40
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff46 	bl	8000524 <H_LCD_void_sendCommand>
        	  break;
 8000698:	e000      	b.n	800069c <H_LCD_void_gotXY+0x4c>
	  }
 800069a:	bf00      	nop
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <H_LCD_void_writeNlatch>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{

}
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_GPIO_void_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fe32 	bl	800031c <M_GPIO_void_SetPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_GPIO_void_SetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	2103      	movs	r1, #3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff fe27 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	095b      	lsrs	r3, r3, #5
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	2104      	movs	r1, #4
 80006de:	2000      	movs	r0, #0
 80006e0:	f7ff fe1c 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	099b      	lsrs	r3, r3, #6
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	2105      	movs	r1, #5
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe11 	bl	800031c <M_GPIO_void_SetPinValue>
 	M_GPIO_void_SetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	09db      	lsrs	r3, r3, #7
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	2106      	movs	r1, #6
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fe09 	bl	800031c <M_GPIO_void_SetPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
 800070a:	2201      	movs	r2, #1
 800070c:	2102      	movs	r1, #2
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fe04 	bl	800031c <M_GPIO_void_SetPinValue>
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff fe7b 	bl	8000410 <_delay_ms>
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
 800071a:	2200      	movs	r2, #0
 800071c:	2102      	movs	r1, #2
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff fdfc 	bl	800031c <M_GPIO_void_SetPinValue>
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 8000724:	2005      	movs	r0, #5
 8000726:	f7ff fe73 	bl	8000410 <_delay_ms>
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_GPIO_void_SetPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	2103      	movs	r1, #3
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fdf0 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	085b      	lsrs	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2104      	movs	r1, #4
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff fde5 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	2105      	movs	r1, #5
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fdda 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	M_GPIO_void_SetPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	08db      	lsrs	r3, r3, #3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	2106      	movs	r1, #6
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fdcf 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
 800077e:	2201      	movs	r2, #1
 8000780:	2102      	movs	r1, #2
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fdca 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fe41 	bl	8000410 <_delay_ms>
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_GPIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
 800078e:	2200      	movs	r2, #0
 8000790:	2102      	movs	r1, #2
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fdc2 	bl	800031c <M_GPIO_void_SetPinValue>
 	 	 // step 10 : delay to allow LCD to process
 	 	_delay_ms(5);
 8000798:	2005      	movs	r0, #5
 800079a:	f7ff fe39 	bl	8000410 <_delay_ms>
#else
  #error("Wrong LCD mode")
#endif

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MRCC_voidSysClkInit>:




void	MRCC_voidSysClkInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MRCC_voidSysClkInit+0x30>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <MRCC_voidSysClkInit+0x30>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MRCC_voidSysClkInit+0x34>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <MRCC_voidSysClkInit+0x34>)
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MRCC_voidSysClkInit+0x34>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <MRCC_voidSysClkInit+0x34>)
 80007ca:	f023 0302 	bic.w	r3, r3, #2
 80007ce:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40021004 	.word	0x40021004

080007e0 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	2b1f      	cmp	r3, #31
 80007f4:	d82a      	bhi.n	800084c <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d01c      	beq.n	8000836 <MRCC_voidEnablePerClk+0x56>
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	dc25      	bgt.n	800084c <MRCC_voidEnablePerClk+0x6c>
 8000800:	2b00      	cmp	r3, #0
 8000802:	d002      	beq.n	800080a <MRCC_voidEnablePerClk+0x2a>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d00b      	beq.n	8000820 <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000808:	e020      	b.n	800084c <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MRCC_voidEnablePerClk+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MRCC_voidEnablePerClk+0x78>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e015      	b.n	800084c <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MRCC_voidEnablePerClk+0x7c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	2101      	movs	r1, #1
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <MRCC_voidEnablePerClk+0x7c>)
 8000830:	430b      	orrs	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e00a      	b.n	800084c <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MRCC_voidEnablePerClk+0x80>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	2101      	movs	r1, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	4611      	mov	r1, r2
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <MRCC_voidEnablePerClk+0x80>)
 8000846:	430b      	orrs	r3, r1
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	bf00      	nop
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40021014 	.word	0x40021014
 800085c:	4002101c 	.word	0x4002101c
 8000860:	40021018 	.word	0x40021018

08000864 <main>:
#include    "LCD_int.h"



int	main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/*	Initialization Part		*/

	/*	System Clk init			*/
	MRCC_voidSysClkInit();
 8000868:	f7ff ff9e 	bl	80007a8 <MRCC_voidSysClkInit>


	/*	Toggle Led C13	GPIOC	*/
	/*	1- Enable Per Clk "RCC" Port A		*/
	MRCC_voidEnablePerClk(RCC_APB2,2);
 800086c:	2102      	movs	r1, #2
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ffb6 	bl	80007e0 <MRCC_voidEnablePerClk>

	//LCD INITIALIZE
	H_LCD_void_Init();
 8000874:	f7ff fde5 	bl	8000442 <H_LCD_void_Init>



	while(1)
	{
		 H_LCD_void_sendData('5');
 8000878:	2035      	movs	r0, #53	; 0x35
 800087a:	f7ff fe41 	bl	8000500 <H_LCD_void_sendData>
      _delay_ms(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f7ff fdc5 	bl	8000410 <_delay_ms>
      H_LCD_void_clear();
 8000886:	f7ff fe78 	bl	800057a <H_LCD_void_clear>
      H_LCD_void_gotXY(1, 0);
 800088a:	2100      	movs	r1, #0
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fedf 	bl	8000650 <H_LCD_void_gotXY>
      H_LCD_void_sendString("HI MR MUHSEN");
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <main+0x58>)
 8000894:	f7ff fe58 	bl	8000548 <H_LCD_void_sendString>
      _delay_ms(1000);
 8000898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089c:	f7ff fdb8 	bl	8000410 <_delay_ms>
      H_LCD_void_clear();
 80008a0:	f7ff fe6b 	bl	800057a <H_LCD_void_clear>
      H_LCD_void_sendIntNum(1234);
 80008a4:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80008a8:	f7ff fe6e 	bl	8000588 <H_LCD_void_sendIntNum>
      _delay_ms(500);
 80008ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b0:	f7ff fdae 	bl	8000410 <_delay_ms>
      H_LCD_void_clear();
 80008b4:	f7ff fe61 	bl	800057a <H_LCD_void_clear>
		 H_LCD_void_sendData('5');
 80008b8:	e7de      	b.n	8000878 <main+0x14>
 80008ba:	bf00      	nop
 80008bc:	08000974 	.word	0x08000974

080008c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ee:	f000 f811 	bl	8000914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff ffb7 	bl	8000864 <main>

080008f6 <LoopForever>:

LoopForever:
  b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   r0, =_estack
 80008f8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000904:	0800098c 	.word	0x0800098c
  ldr r2, =_sbss
 8000908:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800090c:	2000001c 	.word	0x2000001c

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>
	...

08000914 <__libc_init_array>:
 8000914:	b570      	push	{r4, r5, r6, lr}
 8000916:	2600      	movs	r6, #0
 8000918:	4d0c      	ldr	r5, [pc, #48]	; (800094c <__libc_init_array+0x38>)
 800091a:	4c0d      	ldr	r4, [pc, #52]	; (8000950 <__libc_init_array+0x3c>)
 800091c:	1b64      	subs	r4, r4, r5
 800091e:	10a4      	asrs	r4, r4, #2
 8000920:	42a6      	cmp	r6, r4
 8000922:	d109      	bne.n	8000938 <__libc_init_array+0x24>
 8000924:	f000 f81a 	bl	800095c <_init>
 8000928:	2600      	movs	r6, #0
 800092a:	4d0a      	ldr	r5, [pc, #40]	; (8000954 <__libc_init_array+0x40>)
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <__libc_init_array+0x44>)
 800092e:	1b64      	subs	r4, r4, r5
 8000930:	10a4      	asrs	r4, r4, #2
 8000932:	42a6      	cmp	r6, r4
 8000934:	d105      	bne.n	8000942 <__libc_init_array+0x2e>
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f855 3b04 	ldr.w	r3, [r5], #4
 800093c:	4798      	blx	r3
 800093e:	3601      	adds	r6, #1
 8000940:	e7ee      	b.n	8000920 <__libc_init_array+0xc>
 8000942:	f855 3b04 	ldr.w	r3, [r5], #4
 8000946:	4798      	blx	r3
 8000948:	3601      	adds	r6, #1
 800094a:	e7f2      	b.n	8000932 <__libc_init_array+0x1e>
 800094c:	08000984 	.word	0x08000984
 8000950:	08000984 	.word	0x08000984
 8000954:	08000984 	.word	0x08000984
 8000958:	08000988 	.word	0x08000988

0800095c <_init>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	bf00      	nop
 8000960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000962:	bc08      	pop	{r3}
 8000964:	469e      	mov	lr, r3
 8000966:	4770      	bx	lr

08000968 <_fini>:
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	bf00      	nop
 800096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096e:	bc08      	pop	{r3}
 8000970:	469e      	mov	lr, r3
 8000972:	4770      	bx	lr
